from PIL import Image
from itertools import product
from .utils import progress

__palette__ = [
    (0, 0, 0),
    (8, 4, 32),
    (16, 8, 64),
    (24, 12, 96),
    (32, 16, 128),
    (40, 20, 160),
    (48, 24, 192),
    (56, 28, 224),
    (64, 32, 0),
    (72, 36, 32),
    (80, 40, 64),
    (88, 44, 96),
    (96, 48, 128),
    (104, 52, 160),
    (112, 56, 192),
    (120, 60, 224),
    (128, 64, 0),
    (136, 68, 32),
    (144, 72, 64),
    (152, 76, 96),
    (160, 80, 128),
    (168, 84, 160),
    (176, 88, 192),
    (184, 92, 224),
    (192, 96, 0),
    (200, 100, 32),
    (208, 104, 64),
    (216, 108, 96),
    (224, 112, 128),
    (232, 116, 160),
    (240, 120, 192),
    (248, 124, 224),
    (0, 129, 0),
    (8, 133, 32),
    (16, 137, 64),
    (24, 141, 96),
    (32, 145, 128),
    (40, 149, 160),
    (48, 153, 192),
    (56, 157, 224),
    (64, 161, 0),
    (72, 165, 32),
    (80, 169, 64),
    (88, 173, 96),
    (96, 177, 128),
    (104, 181, 160),
    (112, 185, 192),
    (120, 189, 224),
    (128, 193, 0),
    (136, 197, 32),
    (144, 201, 64),
    (152, 205, 96),
    (160, 209, 128),
    (168, 213, 160),
    (176, 217, 192),
    (184, 221, 224),
    (192, 225, 0),
    (200, 229, 32),
    (208, 233, 64),
    (216, 237, 96),
    (224, 241, 128),
    (232, 245, 160),
    (240, 249, 192),
    (248, 253, 224),
    (0, 2, 1),
    (8, 6, 33),
    (16, 10, 65),
    (24, 14, 97),
    (32, 18, 129),
    (40, 22, 161),
    (48, 26, 193),
    (56, 30, 225),
    (64, 34, 1),
    (72, 38, 33),
    (80, 42, 65),
    (88, 46, 97),
    (96, 50, 129),
    (104, 54, 161),
    (112, 58, 193),
    (120, 62, 225),
    (128, 66, 1),
    (136, 70, 33),
    (144, 74, 65),
    (152, 78, 97),
    (160, 82, 129),
    (168, 86, 161),
    (176, 90, 193),
    (184, 94, 225),
    (192, 98, 1),
    (200, 102, 33),
    (208, 106, 65),
    (216, 110, 97),
    (224, 114, 129),
    (232, 118, 161),
    (240, 122, 193),
    (248, 126, 225),
    (0, 131, 1),
    (8, 135, 33),
    (16, 139, 65),
    (24, 143, 97),
    (32, 147, 129),
    (40, 151, 161),
    (48, 155, 193),
    (56, 159, 225),
    (64, 163, 1),
    (72, 167, 33),
    (80, 171, 65),
    (88, 175, 97),
    (96, 179, 129),
    (104, 183, 161),
    (112, 187, 193),
    (120, 191, 225),
    (128, 195, 1),
    (136, 199, 33),
    (144, 203, 65),
    (152, 207, 97),
    (160, 211, 129),
    (168, 215, 161),
    (176, 219, 193),
    (184, 223, 225),
    (192, 227, 1),
    (200, 231, 33),
    (208, 235, 65),
    (216, 239, 97),
    (224, 243, 129),
    (232, 247, 161),
    (240, 251, 193),
    (248, 255, 225),
    (0, 4, 2),
    (8, 8, 34),
    (16, 12, 66),
    (24, 16, 98),
    (32, 20, 130),
    (40, 24, 162),
    (48, 28, 194),
    (56, 32, 226),
    (64, 36, 2),
    (72, 40, 34),
    (80, 44, 66),
    (88, 48, 98),
    (96, 52, 130),
    (104, 56, 162),
    (112, 60, 194),
    (120, 64, 226),
    (128, 68, 2),
    (136, 72, 34),
    (144, 76, 66),
    (152, 80, 98),
    (160, 84, 130),
    (168, 88, 162),
    (176, 92, 194),
    (184, 96, 226),
    (192, 100, 2),
    (200, 104, 34),
    (208, 108, 66),
    (216, 112, 98),
    (224, 116, 130),
    (232, 120, 162),
    (240, 124, 194),
    (248, 128, 226),
    (0, 133, 2),
    (8, 137, 34),
    (16, 141, 66),
    (24, 145, 98),
    (32, 149, 130),
    (40, 153, 162),
    (48, 157, 194),
    (56, 161, 226),
    (64, 165, 2),
    (72, 169, 34),
    (80, 173, 66),
    (88, 177, 98),
    (96, 181, 130),
    (104, 185, 162),
    (112, 189, 194),
    (120, 193, 226),
    (128, 197, 2),
    (136, 201, 34),
    (144, 205, 66),
    (152, 209, 98),
    (160, 213, 130),
    (168, 217, 162),
    (176, 221, 194),
    (184, 225, 226),
    (192, 229, 2),
    (200, 233, 34),
    (208, 237, 66),
    (216, 241, 98),
    (224, 245, 130),
    (232, 249, 162),
    (240, 253, 194),
    (248, 1, 227),
    (0, 6, 3),
    (8, 10, 35),
    (16, 14, 67),
    (24, 18, 99),
    (32, 22, 131),
    (40, 26, 163),
    (48, 30, 195),
    (56, 34, 227),
    (64, 38, 3),
    (72, 42, 35),
    (80, 46, 67),
    (88, 50, 99),
    (96, 54, 131),
    (104, 58, 163),
    (112, 62, 195),
    (120, 66, 227),
    (128, 70, 3),
    (136, 74, 35),
    (144, 78, 67),
    (152, 82, 99),
    (160, 86, 131),
    (168, 90, 163),
    (176, 94, 195),
    (184, 98, 227),
    (192, 102, 3),
    (200, 106, 35),
    (208, 110, 67),
    (216, 114, 99),
    (224, 118, 131),
    (232, 122, 163),
    (240, 126, 195),
    (248, 130, 227),
    (0, 135, 3),
    (8, 139, 35),
    (16, 143, 67),
    (24, 147, 99),
    (32, 151, 131),
    (40, 155, 163),
    (48, 159, 195),
    (56, 163, 227),
    (64, 167, 3),
    (72, 171, 35),
    (80, 175, 67),
    (88, 179, 99),
    (96, 183, 131),
    (104, 187, 163),
    (112, 191, 195),
    (120, 195, 227),
    (128, 199, 3),
    (136, 203, 35),
    (144, 207, 67),
    (152, 211, 99),
    (160, 215, 131),
    (168, 219, 163),
    (176, 223, 195),
    (184, 227, 227),
    (192, 231, 3),
    (200, 235, 35),
    (208, 239, 67),
    (216, 243, 99),
    (224, 247, 131),
    (232, 251, 163),
    (240, 255, 195),
    (248, 3, 228)
]

# taken from https://rosettacode.org/wiki/Julia_set#Naive_approach
def colorshift(
    src_img: Image, zoom=1, cx = -1, cy = 1, dx = 0, dy = 0, zf = 0.5, kx = 1.5, ky = 1.0, normalization = 9
) -> Image:
    (w, h) = src_img.size
    dst_img = src_img.copy()

    src = src_img.load()
    dst = dst_img.load()

    for x in progress(w):
        for y in range(h):
            zx = kx * (x - w / 2) / (zf * zoom * w) + dx
            zy = ky * (y - h / 2) / (zf * zoom * h) + dy
            i = sum(src[x, y])/normalization
            while zx * zx + zy * zy < 4 and i > 1:
                tmp = zx * zx - zy * zy + cx
                zy, zx = 2.0 * zx * zy + cy, tmp
                i -= 1
            # convert byte to RGB (3 bytes), kinda magic to get nice colors
            # this works in python 2, but in 3 we lose short (2 byte) ints :(
            # dst[x, y] = (i << 21) + (i << 10) + (i * 8)

            # instead, rely on precomputed mapping:
            dst[x, y] = __palette__[int(i)]

    return dst_img
